#This could be usefull to reserve a node
#get-resources:
#  stage: .pre
#  script:
#    - echo "Getting node"
#    - srun --immediate --pty --qos c1_inter_giga --time 1:00:00 --ntasks 8 bash
#    - echo "Now running on $HOSTNAME"

# Prevent duplicated pipeline by removing MR pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

variables:
  GIT_STRATEGY: none # don't do anything by default
#Common to both stages
before_script:
  - module purge
  - source /home/sonics/spack_new/spack/share/spack/setup-env.sh
  - source /home/sonics/source-intel-oneapi-2021.2-spiro.me --compiler gcc10.1

stages:
  - init
  - build
  - test
  - deploy
#  - report
#  - clean

job:init:
  stage: init
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - ''
  script: # explicitly load modules one by one, so that if one fails, it will be easy to identify
    - git submodule update --init external/project_utils
    - git submodule update --init external/cpp_cgns
    - git submodule update --init external/std_e
    - git submodule update --init external/pytest-mpi-check
    - git submodule update --init external/paradigm
    - (cd external/paradigm && git submodule update --init extensions/paradigma)

job:build:
  stage: build
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -Dmaia_ENABLE_TESTS=ON -Dmaia_ENABLE_COVERAGE=ON -DPDM_ENABLE_EXTENSION_PDMA=ON ../
    - make -j8

# This build documentation after main build, only if branch is dev or for MR events
job:doc:
  stage: build
  needs: ["job:build"]
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_BRANCH == "dev"
  script:
    - cd build
    - source source.sh
    - cmake -Dmaia_ENABLE_DOCUMENTATION=ON .
    - make maia_sphinx


#todo : display reports on browser eg with gitlab pages
job:ctest:
  stage: test
  script:
    - cd build
    - ctest -E pdm
  after_script:
    - cd build/test
    - coverage combine --rcfile=.coveragerc_unit_tests
    - coverage report --rcfile=.coveragerc_unit_tests
    - coverage xml --rcfile=.coveragerc_unit_tests -o coverage_unit_tests.xml
    - sed 's@'"$CI_PROJECT_DIR"'/@@' -i coverage_unit_tests.xml
  when: on_success # s'exécutera uniquement si le job `job:build` passe
  artifacts:
    paths:
      - ./build/test/reports/*
    when: always
    # Next allows to display a test tab in the pipeline with report but requires a feature flag to be enabled,
    # see https://docs.gitlab.com/ee/ci/unit_test_reports.html#viewing-unit-test-reports-on-gitlab
    # Use it in combination with --junitxml=reports/pytest-junit.xml in the pytest launcher (TestCreate.cmake)
    reports:
      junit: ./build/test/reports/*_test.xml
      cobertura: ./build/test/coverage_unit_tests.xml

job:doc_snippets:
  stage: test
  script:
    - cd build
    - source source.sh; unset PYTEST_PLUGINS
    - python3 -m pytest ../doc

# Deploy the documentation sphinx documentation to the site, only if branch is dev
job:deploy_doc:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  before_script: 
    - ''
  script:
    - cd build/doc/sphinx/html
    # I dont know how to clean the repo before (deltree does not work on spiro) so lets erase everything
    - smbclient -U jcoulet%$DROPPY_PSSWD //droopy2/Maia -c "prompt OFF; recurse ON; mput *"

job:deploy_spiro:
  stage: deploy
  tags: 
    - spiro
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  before_script: 
    - module purge
    - source /home/sonics/spack_new/spack/share/spack/setup-env.sh
    - source /home/sonics/source-intel-oneapi-2021.2-spiro.me --compiler gcc8.3
  script:
    - export PREFIX=/scratchm/jcoulet/aa_install_py3/maia
             FLAGS="-DCMAKE_CXX_STANDARD=17 -DPDM_ENABLE_EXTENSION_PDMA=ON"
    - cd build
    - rm CMakeCache.txt
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PREFIX/dbg-oneapi $FLAGS ../
    - make -j 24 install > oneapi_dbg.log
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX/opt-oneapi .
    - make -j 24 install > oneapi_opt.log
    - module purge
    - module load CFD/5.0-intel-19.impi-19 cmake/3.19-gnu
    - rm CMakeCache.txt
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PREFIX/dbg-intel19 $FLAGS -DCMAKE_EXE_LINKER_FLAGS='-lz -lbz2' -DCMAKE_SHARED_LINKER_FLAGS='-lbz2 -lz' ../
    - make -j 24 install > intel19_dbg.log
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX/opt-intel19 .
    - make -j 24 install > intel19_opt.log

job:deploy_sator:
  stage: deploy
  tags: 
    - sator
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script: 
    - module purge
    - source /tmp_user/sator/sonics/source-intel-oneapi-2021.2-sator-centos8.me --compiler gcc8.3
    - export https_proxy=http://proxy.onera:80
  script:
    - git submodule update --init
    - (cd external/paradigm && git submodule update --init)
    - mkdir build && cd build
    - export CC=gcc CXX=g++ FC=gfortran
             PARMETIS_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/parmetis-4.0.3-pznujngpl3jugn6yi44q364x6jkqugzl
             METIS_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/metis-5.1.0-ufi2oqocw77dkv6ks36c4jangfxhda5l
             SCOTCH_ROOT=/tmp_user/sator/sonics/opt-centos8/gcc-8.3.0/scotch-6.0.9-4wd3pamq3potrr4qv3frkb45ysrdybqn
    - cmake ../ -DCMAKE_BUILD_TYPE=Release
                -DCMAKE_INSTALL_PREFIX=/tmp_user/sator/jcoulet/opt/maia
                -DCMAKE_CXX_STANDARD=17
                -DPDM_ENABLE_LONG_G_NUM=ON -DPDM_ENABLE_EXTENSION_PDMA=ON
    - make -j install
      
#job:report:
#  stage: report
#  script:
#    - cd build
#    - make report
#  when: on_failure # s'exécutera si le job `job:build` ou `job:test` ne passe pas

#job:clean:
#  stage: clean
#  script:
#    - cd build
#    - make clean # s'exécutera quoi qu'il se passe
#  when: always

