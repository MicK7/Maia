#This could be usefull to reserve a node
#get-resources:
#  stage: .pre
#  script:
#    - echo "Getting node"
#    - srun --immediate --pty --qos c1_inter_giga --time 1:00:00 --ntasks 8 bash
#    - echo "Now running on $HOSTNAME"

#Common to both stages
before_script:
  - module purge
  - source /home/sonics/spack_new/spack/share/spack/setup-env.sh
  - source /home/sonics/source-intel-oneapi-2021.2-spiro.me --compiler gcc8.3

stages:
  - build
  - test
#  - report
#  - clean

job:build:
  stage: build
  script:
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -Dmaia_ENABLE_MPI_TESTS=ON -Dmaia_ENABLE_COVERAGE=ON -Dmaia_USE_PDM_INSTALL=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON ../
    - make -j8
  cache:
    paths:
      - build # répertoire mis en cache
    policy: push # le cache sera juste sauvegardé, pas de récupération d'un cache existant

#todo : display reports on browser eg with gitlab pages
job:test:
  stage: test
  script:
    - cd build
    - ctest -E pdm #Exclude pdm tests, some of them fail
  after_script:
    - cd build/test
    - coverage combine --rcfile=.coveragerc_unit_tests
    - coverage report --rcfile=.coveragerc_unit_tests
    - coverage xml --rcfile=.coveragerc_unit_tests -o coverage_unit_tests.xml
    - sed 's@'"$CI_PROJECT_DIR"'/@@' -i coverage_unit_tests.xml
  when: on_success # s'exécutera uniquement si le job `job:build` passe
  cache:
    paths:
      - build
    policy: pull # récupération du cache
  artifacts:
    paths:
      - ./build/test/reports/*
    when: always
    # Next allows to display a test tab in the pipeline with report but requires a feature flag to be enabled,
    # see https://docs.gitlab.com/ee/ci/unit_test_reports.html#viewing-unit-test-reports-on-gitlab
    # Use it in combination with --junitxml=reports/pytest-junit.xml in the pytest launcher (TestCreate.cmake)
    reports:
      junit: ./build/test/reports/*_test.xml
      cobertura: ./build/test/coverage_unit_tests.xml

#job:report:
#  stage: report
#  script:
#    - cd build
#    - make report
#  when: on_failure # s'exécutera si le job `job:build` ou `job:test` ne passe pas

#job:clean:
#  stage: clean
#  script:
#    - cd build
#    - make clean # s'exécutera quoi qu'il se passe
#  when: always

